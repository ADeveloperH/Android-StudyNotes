参考：http://www.jianshu.com/p/aad5aacd79bf（深度好文very good）

拦截器分析：
http://www.jianshu.com/p/64111e0db93c
http://youngkaaa.cn/2017/05/08/public/2017-5-8%20OkHttp%20Source2/

Okhttp的I/O使用的是Okio库，它是java中最好用的I/O API
	okio介绍：http://blog.csdn.net/zoudifei/article/details/51232711
			https://juejin.im/entry/580ec75ba0bb9f0061cebba6

OkHttp的最底层是Socket，而不是URLConnection。自从Android4.4以来，URLConnection在fram的实现也是使用了okhttp
	android中okhttp、httpurlconnection、httpclient关系及与socket的关系：
	（okhttp和httpurlconnection都是对socket的封装。httpclient6.0已经删除。）
	http://blog.csdn.net/zhangcanyan/article/details/51793951
	http://blog.csdn.net/stven_king/article/details/51936158
	
okhttp中线程池Dispatcher讲解：http://www.jianshu.com/p/1e44420e2fd4
	默认：最大maxRequests(最大请求数64)和maxRequestsPerHost(相同host最大请求数5)

okhttp缓存：默认根据header处理的，只能处理get不能处理post。具体的可以查看参考链接
	

源码中重要的类：
OkHttpClient：使用Build建造者模式。可以配置相关请求信息
	实现了Call.Factory负责根据请求创建新的 Call
	callFactory 负责创建 HTTP 请求，HTTP 请求被抽象为了 okhttp3.Call 类，它表示一个已经准备好，可以随时执行的 HTTP 请求

Request：http请求。设置url、method、header、body等请求信息
RealCall：发出请求。同步、异步请求。添加各种interceptors
	很重要的一个类。发出请求
	实现了Call。实现了该接口的request()、execute()、enqueue(Callback responseCallback)、cancel()等方法
	分析execute()方法实现：
		1、 检查这个 call 是否已经被执行了，每个 call 只能被执行一次，如果想要一个完全一样的 call，可以利用 call#clone 方法进行克隆。
		2、 利用 client.dispatcher().executed(this) 来进行实际执行，dispatcher 是刚才看到的 OkHttpClient.Builder 的成员之一，
			它的文档说自己是异步 HTTP 请求的执行策略，现在看来，同步请求它也有掺和。
		3、 调用 getResponseWithInterceptorChain() 函数获取 HTTP 返回结果，从函数名可以看出，这一步还会进行一系列“拦截”操作。
		4、 最后还要通知 dispatcher 自己已经执行完毕。
		真正发出网络请求，解析返回结果的，还是 getResponseWithInterceptorChain：
	分析getResponseWithInterceptorChain：设置一系列的Interceptor。责任链模式在这个 Interceptor 链条中得到了很好的实践
		1、在配置 OkHttpClient 时设置的 interceptors；
		2、负责失败重试以及重定向的 RetryAndFollowUpInterceptor；
		3、负责把用户构造的请求转换为发送到服务器的请求、把服务器返回的响应转换为用户友好的响应的 BridgeInterceptor。
			BridgeInterceptor拦截器再Request阶段，就是配置相关信息，重新build Request对象，添加请求头。在Response阶段做gzip解压。
		4、负责读取缓存直接返回、更新缓存的 CacheInterceptor；
			CacheInterceptor拦截器在Request中检查是否该请求有缓存，是否要重新请求，如果不需要，则使用缓存，不调用下一层。
			Response阶段则对下一层的Response做缓存。
		5、负责和服务器建立连接的 ConnectInterceptor；
			ConnectInterceptor拦截器只在Request阶段建立连接，Response阶段直接把下一层的Response返回给上一层
			ConnectionPool类中：最多支持保持5个地址的连接keep-alive，每个keep-alive 5分钟，并有异步线程循环清理无效的连接。
		6、配置 OkHttpClient 时设置的 networkInterceptors；
		7、负责向服务器发送请求数据、从服务器读取响应数据的 CallServerInterceptor。
		在这里，位置决定了功能，最后一个 Interceptor 一定是负责和服务器实际通讯的，重定向、缓存等一定是在实际通讯之前的。
	其实 Interceptor 的设计也是一种分层的思想，每个 Interceptor 就是一层。为什么要套这么多层呢？分层的思想在 TCP/IP 协议中就体现得淋漓尽致，
	分层简化了每一层的逻辑，每层只需要关注自己的责任（单一原则思想也在此体现），而各层之间通过约定的接口/协议进行合作（面向接口编程思想），
	共同完成复杂的任务。
	okhttp3.Interceptor#intercept(Chain chain)：
	1、RealInterceptorChain（Chain的实现类）的proceed()，每次重新创建一个RealInterceptorChain对象，然后调用下一层的拦截器的interceptor.intercept()方法。
	2、每一个拦截器的intercept()方法都是这样的结构：
		@Override 
		public Response intercept(Chain chain) throws IOException {
			Request request = chain.request();
			// 1、该拦截器在Request阶段负责的事情
			// 2、调用RealInterceptorChain.proceed()，其实是递归调用下一层拦截器的intercept方法
			response = ((RealInterceptorChain) chain).proceed(request, streamAllocation, null, null);
			//3、该拦截器在Response阶段负责的事情，然后返回到上一层拦截器的 response阶段
			return  response;     
			}
		}


	
Response：响应的信息。包含返回的code、message、header、body等信息








引入：
1、Android设置模式：（责任链模式）
	责任链模式：
		它包含了一些命令对象和一系列的处理对象，每一个处理对象决定它能处理哪些命令对象，
		它也知道如何将它不能处理的命令对象传递给该链中的下一个处理对象。该模式还描述了往该处理链的末尾添加新的处理对象的方法。
	https://github.com/simple-android-framework-exchange/android_design_patterns_analysis