介绍：
	代码混淆（Obfuscated code）亦称花指令，是将计算机程序的代码，转换成一种功能上等价，但是难于阅读和理解的形式的行为。
	代码混淆影响到的元素有：类名、变量名、方法名、包名、其他元素
	
作用：
	ProGuard通过删除无用代码，将代码中类名、方法名、属性名用晦涩难懂的名称重命名从而达到代码混淆、压缩和优化的功能。
	压缩和优化使得编译后apk包更小。
	混淆可以保证代码在被反编译后很难读懂，防止逆向工程。

ProGuard的生成文件介绍：
	mapping.txt ―> 表示混淆前后代码的对照表，这个文件非常重要。如果你的代码混淆后会产生bug的话，log提示中是混淆后的代码，
					希望定位到源代码的话就可以根据mapping.txt反推。每次发布都要保留它方便该版本出现问题时调出日志进行排查，
					它可以根据版本号或是发布时间命名来保存或是放进代码版本控制中。
	dump.txt ―> 描述apk内所有class文件的内部结构
	seeds.txt ―> 列出了没有被混淆的类和成员
	usage.txt ―> 列出了源代码中被删除在apk中不存在的代码
	
ProGuard不混淆：
	反射用到的类
	Android中Manifest中配置的类(Activity、Service等的子类及Framework类默认不进行混淆)
	Jni中调用的类
	用到的第三方的jar包
	表示保留本地的bean文件下的实体类
	特别处理js与本地原生组件之间的调用过程
	自定义不混淆的类

ProGuard常用语法：
	-dontusemixedcaseclassnames：表示混淆时不使用大小写混合类名 ，混淆后的类名为小写。 这个是给Microsoft Windows用户的，
								 因为ProGuard假定使用的操作系统是能区分两个只是大小写不同的文件名，但是Microsoft Windows不是这样的操作系统，
								 所以必须为ProGuard指定-dontusemixedcaseclassnames选项
	-dontskipnonpubliclibraryclasses：表示不跳过library中的非public修辞的类。用于告诉ProGuard，不要跳过对非公开类的处理。默认情况下是跳过的，
								 因为程序中不会引用它们，有些情况下人们编写的代码与类库中的类在同一个包下，并且对包中内容加以引用，此时需要加入此条声明。
	-verbose：表示打印混淆的详细信息。有了verbose这句话，混淆后就会生成映射文件，包含有类名->混淆后类名的映射关系然后
	-printmapping proguardMapping.txt：使用printmapping指定映射文件的名称

	-dontoptimize：表示不进行优化，建议使用此选项，因为根据proguard-android-optimize.txt中的描述，优化可能会造成一些潜在风险，
				   不能保证在所有版本的Dalvik上都正常运行。
	-dontpreverify：表示不进行预校验。这个预校验是作用在Java平台上的，Android平台上不需要这项功能，去掉之后还可以加快混淆速度。 
	-optimizationpasses 5：指定优化的级别，在0-7之间，默认为5.
	-optimizations !code/simplification/arithmetic,!field/*,!class/merging/*：指定混淆时采用的算法，后面的参数是一个过滤器，这个过滤器是谷歌推荐的算法，一般不改变

	-keepattributes {attribute_name,...}：保护给定的可选属性，例如LineNumberTable, LocalVariableTable, SourceFile, Deprecated, Synthetic, Signature, InnerClasses. 
	-keepattributes SourceFile,LineNumberTable：抛出异常时保留代码行号，在异常分析中可以方便定位
	-keepattributes Signature：避免混淆泛型，这在JSON实体映射时非常重要，比如fastJson
	-keepattributes *Annotation*：保护代码中的Annotation不被混淆，这在JSON实体映射时非常重要，比如fastJson

SDK中目录：..\SDK\tools\proguard\proguard-android.txt默认的配置说明：
	-keep public class com.google.vending.licensing.ILicensingService
	-keep public class com.android.vending.licensing.ILicensingService
	表示不混淆上述声明的两个类，这两个类我们基本也用不上，是接入Google原生的一些服务时使用的。

	-keepclasseswithmembernames class * {
		native <methods>;
	}
	表示不混淆任何包含native方法的类的类名以及native方法名
	-keepclassmembers public class * extends android.view.View {
	   void set*(***);
	   *** get*();
	}
	表示不混淆任何一个View中的setXxx()和getXxx()方法，因为属性动画需要有相应的setter和getter的方法实现，混淆了就无法工作了
	-keepclassmembers class * extends android.app.Activity {
	   public void *(android.view.View);
	}
	表示不混淆Activity中参数是View的方法，因为有这样一种用法，在XML中配置android:onClick=”buttonClick”属性，
	当用户点击该按钮时就会调用Activity中的buttonClick(View view)方法，如果这个方法被混淆的话就找不到了。
	-keepclassmembers enum * {
		public static **[] values();
		public static ** valueOf(java.lang.String);
	}
	表示不混淆枚举中的values()和valueOf()方法
	-keepclassmembers class * implements android.os.Parcelable {
	  public static final android.os.Parcelable$Creator CREATOR;
	}
	表示不混淆Parcelable实现类中的CREATOR字段，毫无疑问，CREATOR字段是绝对不能改变的，包括大小写都不能变，不然整个Parcelable工作机制都会失败。
	-keepclassmembers class **.R$* {
		public static <fields>;
	}
	表示不混淆R文件中的所有静态字段，我们都知道R文件是通过字段来记录每个资源的id的，字段名要是被混淆了，id也就找不着了。 
	-dontwarn android.support.**
	表示对android.support包下的代码不警告，因为support包中有很多代码都是在高版本中使用的，
	如果我们的项目指定的版本比较低在打包时就会给予警告。不过support包中所有的代码都在版本兼容性上做足了判断，
	因此不用担心代码会出问题，所以直接忽略警告就可以了。 

	-keep class android.support.annotation.Keep
	-keep @android.support.annotation.Keep class * {*;}
	-keepclasseswithmembers class * {
		@android.support.annotation.Keep <methods>;
	}
	-keepclasseswithmembers class * {
		@android.support.annotation.Keep <fields>;
	}
	-keepclasseswithmembers class * {
		@android.support.annotation.Keep <init>(...);
	}
	@Keep注解来防止混淆.目前Gradle还不支持@Keep混淆，Google只是定义好了一个这种注解，并没有实现它，也就是说@Keep目前只是一个空壳。
	这里我们来手动开启它，让它支持防止混淆。


六个keep关键字：
	-keep	保留类和类中的成员，防止它们被混淆或移除。
	-keepnames	保留类和类中的成员，防止它们被混淆，但当成员没有被引用时会被移除。
	-keepclassmembers	只保留类中的成员，防止它们被混淆或移除。
	-keepclassmembernames	只保留类中的成员，防止它们被混淆，但当成员没有被引用时会被移除。
	-keepclasseswithmembers	保留类和类中的成员，防止它们被混淆或移除，前提是指名的类中的成员必须存在，如果不存在则还是会混淆。
	-keepclasseswithmembernames	保留类和类中的成员，防止它们被混淆，但当成员没有被引用时会被移除，
								前提是指名的类中的成员必须存在，如果不存在则还是会混淆。
	理解：  1、如果不使用keep类和类中的成员都会混淆，不被引用是也会被移除。
			2、keep保留级别最高，类和类中的成员都保留且不会被移除
			3、带with表示保留时会保留类，不带with表示对类中的成员的保留
			4、classmembers表示保留成员防止混淆或移除，classmembernames保留成员防止混淆，有可能被移除
			5、越长表示约束条件越多，保留的级别越低		
	区别：
			-keepclasseswithmember class * {
				native <methods>;
			}	
			保留所有含有native方法的类的类名和native方法名，而如果某个类中没有含有native方法，那就还是会被混淆。
			-keep class * {
				native <methods>;
			}
			代码中所有类的类名都不会被混淆了，因为keep关键字看到class *就认为应该将所有类名进行保留，而不会关心该类中是否含有native方法。
			当然这样写只会保证类名不会被混淆，类中的成员还是会被混淆的。
	
通配符：
	<field>	匹配类中的所有字段
	<method>	匹配类中的所有方法
	<init>	匹配类中的所有构造函数
	*	匹配任意长度字符，但不含包名分隔符(.)。比如说我们的完整类名是com.example.test.MyActivity，使用com.*，
		或者com.exmaple.*都是无法匹配的，因为*无法匹配包名中的分隔符，正确的匹配方式是com.exmaple.*.*，或者com.exmaple.test.*，这些都是可以的。
		但如果你不写任何其它内容，只有一个*，那就表示匹配所有的东西。
	**	匹配任意长度字符，并且包含包名分隔符(.)。比如proguard-android.txt中使用的-dontwarn android.support.**就可以匹配android.support包下的所有内容，
		包括任意长度的子包。
	***	匹配任意参数类型。比如void set*(***)就能匹配任意传入的参数类型，*** get*()就能匹配任意返回值的类型。
	…	匹配任意长度的任意类型参数。比如void test(…)就能匹配任意void test(String a)或者是void test(int a, String b)这些方法。


	
	
	
	
	
问题：
1、为什么需要保留四大组件?
	四大组件声明必须在manifest中注册,如果混淆后类名更改,而混淆后的类名没有在manifest注册,是不符合Android组件注册机制的.
	外部程序可能使用组件的字符串类名,如果类名混淆,可能导致出现异常
	
2、为什么没有手动Keep四大组件也没有什么问题?
	默认的Proguard配置已经默认了四大组件的keep。（查看SDK下默认是没有配置的）
	在gradle中配置时使用了proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
	其中proguard-android.txt是默认的配置。在SDK中目录：E:\Users\SDK\tools\proguard\proguard-android.txt中已经配置基础的内容
	